{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n* Creates a new game instance.\n*\n* @param {number[][]} initialState\n* The initial state of the board.\n* @default\n* [[0, 0, 0, 0],\n*  [0, 0, 0, 0],\n*  [0, 0, 0, 0],\n*  [0, 0, 0, 0]]\n*\n* If passed, the board will be initialized with the provided\n* initial state.\n*/ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.field = initialState.map((row)=>[\n                ...row\n            ]);\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    randomCell() {\n        let row = 0;\n        let col = 0;\n        let value = 2;\n        for(let i = 0; i < 1; i++){\n            row = Math.floor(Math.random() * 4);\n            col = Math.floor(Math.random() * 4);\n            const cell = [\n                row,\n                col\n            ];\n            const subValue = Math.floor(Math.random() * 100);\n            if (subValue > 89) value = 4;\n            else value = 2;\n            if (this.field[cell[0]][cell[1]] === 0) this.field[cell[0]][cell[1]] = value;\n            else i--;\n        }\n    }\n    moveLeft() {\n        const copy = this.field.map((row)=>row.map((el)=>el));\n        const stat = this.getStatus();\n        if (stat === \"playing\") {\n            for(let x = 0; x <= this.field.length - 1; x++)for(let y = 0; y < this.field.length - 1; y++){\n                for(let xX = 0; xX <= this.field.length - 1; xX++)for(let yY = 0; yY < this.field.length - 1;){\n                    const cur = this.field[xX][yY];\n                    const nextCur = this.field[xX][yY + 1];\n                    if (cur === 0 && nextCur > 0) {\n                        this.field[xX][yY] = this.field[xX][yY + 1];\n                        this.field[xX][yY + 1] = 0;\n                        yY = 0;\n                    } else yY++;\n                }\n                const current = this.field[x][y];\n                const next = this.field[x][y + 1];\n                if (current === next) {\n                    this.field[x][y] *= 2;\n                    this.score += this.field[x][y];\n                    this.field[x][y + 1] = 0;\n                }\n            }\n        }\n        const newState = this.getState();\n        if (JSON.stringify(copy) !== JSON.stringify(newState)) this.randomCell();\n    }\n    moveRight() {\n        const copy = this.field.map((row)=>row.map((el)=>el));\n        const stat = this.getStatus();\n        if (stat === \"playing\") {\n            for(let x = 0; x <= this.field.length - 1; x++)for(let y = this.field.length - 1; y > 0; y--){\n                for(let xX = 0; xX <= this.field.length - 1; xX++)for(let yY = this.field.length - 1; yY > 0;){\n                    const cur = this.field[xX][yY];\n                    const nextCur = this.field[xX][yY - 1];\n                    if (cur === 0 && nextCur > 0) {\n                        this.field[xX][yY] = this.field[xX][yY - 1];\n                        this.field[xX][yY - 1] = 0;\n                        yY = this.field.length - 1;\n                    } else yY--;\n                }\n                const current = this.field[x][y];\n                const next = this.field[x][y - 1];\n                if (current === next) {\n                    this.field[x][y] *= 2;\n                    this.score += this.field[x][y];\n                    this.field[x][y - 1] = 0;\n                }\n            }\n        }\n        const newState = this.getState();\n        if (JSON.stringify(copy) !== JSON.stringify(newState)) this.randomCell();\n    }\n    moveUp() {\n        const copy = this.field.map((row)=>row.map((el)=>el));\n        const stat = this.getStatus();\n        if (stat === \"playing\") {\n            for(let y = 0; y < this.field.length; y++)for(let x = 0; x < this.field.length - 1; x++){\n                for(let yY = 0; yY < this.field.length; yY++)for(let xX = 0; xX < this.field.length - 1;){\n                    const cur = this.field[xX][yY];\n                    const nextCur = this.field[xX + 1][yY];\n                    if (cur === 0 && nextCur > 0) {\n                        this.field[xX][yY] = this.field[xX + 1][yY];\n                        this.field[xX + 1][yY] = 0;\n                        xX = 0;\n                    } else xX++;\n                }\n                const current = this.field[x][y];\n                const next = this.field[x + 1][y];\n                if (current === next) {\n                    this.field[x][y] *= 2;\n                    this.score += this.field[x][y];\n                    this.field[x + 1][y] = 0;\n                }\n            }\n        }\n        const newState = this.getState();\n        if (JSON.stringify(copy) !== JSON.stringify(newState)) this.randomCell();\n    }\n    moveDown() {\n        const copy = this.field.map((row)=>row.map((el)=>el));\n        const stat = this.getStatus();\n        if (stat === \"playing\") {\n            for(let y = this.field.length - 1; y >= 0; y--)for(let x = this.field.length - 1; x > 0; x--){\n                for(let yY = this.field.length - 1; yY >= 0; yY--)for(let xX = this.field.length - 1; xX > 0;){\n                    const cur = this.field[xX][yY];\n                    const nextCur = this.field[xX - 1][yY];\n                    if (cur === 0 && nextCur > 0) {\n                        this.field[xX][yY] = this.field[xX - 1][yY];\n                        this.field[xX - 1][yY] = 0;\n                        xX = this.field.length - 1;\n                    } else xX--;\n                }\n                const current = this.field[x][y];\n                const next = this.field[x - 1][y];\n                if (current === next) {\n                    this.field[x][y] *= 2;\n                    this.score += this.field[x][y];\n                    this.field[x - 1][y] = 0;\n                }\n            }\n        }\n        const newState = this.getState();\n        if (JSON.stringify(copy) !== JSON.stringify(newState)) this.randomCell();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.field;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ canMove() {\n        for(let x = 0; x <= 3; x++)for(let y = 0; y < 3; y++){\n            if (this.field[x][y] === this.field[x][y + 1]) return true;\n        }\n        for(let y = 0; y <= 3; y++)for(let x = 0; x < 3; x++){\n            if (this.field[x][y] === this.field[x + 1][y]) return true;\n        }\n        for(let y = 0; y <= 3; y++)for(let x = 0; x < 3; x++){\n            if (this.field[x][y] === 0) return true;\n        }\n    }\n    isWin() {\n        for(let x = 0; x < this.field.length; x++)for(let y = 0; y < this.field.length; y++){\n            if (this.field[x][y] >= 2048) return true;\n        }\n    }\n    getStatus() {\n        if (!this.canMove()) this.status = \"lose\";\n        if (this.isWin()) this.status = \"win\";\n        return this.status;\n    }\n    start() {\n        let value = 2;\n        let row = 0;\n        let col = 0;\n        for(let i = 0; i < 2; i++){\n            row = Math.floor(Math.random() * 4);\n            col = Math.floor(Math.random() * 4);\n            const newCell = [\n                row,\n                col\n            ];\n            if (this.field[newCell[0]][newCell[1]] === 0) {\n                const subValue = Math.floor(Math.random() * 100);\n                if (subValue > 89) value = 4;\n                else value = 2;\n                this.field[newCell[0]][newCell[1]] = value;\n            } else i--;\n        }\n        this.status = \"playing\";\n    }\n    restart(initialState) {\n        this.status = \"idle\";\n        this.score = 0;\n        this.field = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$start = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$scoreWindow = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$start.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$start.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$start.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            $09e991522ca7e64e$var$gameField.rows[i].cells[j].classList.remove(`field-cell--${$09e991522ca7e64e$var$game.field[i][j]}`);\n            $09e991522ca7e64e$var$gameField.rows[i].cells[j].textContent = \"\";\n        }\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$scoreWindow.textContent = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$game.start();\n        for(let x = 0; x < 4; x++){\n            for(let y = 0; y < 4; y++)if ($09e991522ca7e64e$var$game.field[x][y] !== 0) {\n                $09e991522ca7e64e$var$gameField.rows[x].cells[y].classList.add(`field-cell--${$09e991522ca7e64e$var$game.field[x][y]}`);\n                $09e991522ca7e64e$var$gameField.rows[x].cells[y].textContent = $09e991522ca7e64e$var$game.field[x][y];\n            }\n        }\n    } else {\n        $09e991522ca7e64e$var$start.classList.add(\"restart\");\n        $09e991522ca7e64e$var$start.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n        for(let x = 0; x < 4; x++){\n            for(let y = 0; y < 4; y++)if ($09e991522ca7e64e$var$game.field[x][y] !== 0) {\n                $09e991522ca7e64e$var$gameField.rows[x].cells[y].classList.add(`field-cell--${$09e991522ca7e64e$var$game.field[x][y]}`);\n                $09e991522ca7e64e$var$gameField.rows[x].cells[y].textContent = $09e991522ca7e64e$var$game.field[x][y];\n            }\n        }\n    }\n});\nfunction $09e991522ca7e64e$var$createGameField() {\n    for(let x = 0; x < $09e991522ca7e64e$var$game.field.length; x++)for(let y = 0; y < $09e991522ca7e64e$var$game.field.length; y++){\n        $09e991522ca7e64e$var$gameField.rows[x].cells[y].classList.remove(`field-cell--${$09e991522ca7e64e$var$gameField.rows[x].cells[y].textContent}`);\n        $09e991522ca7e64e$var$gameField.rows[x].cells[y].textContent = \"\";\n        if ($09e991522ca7e64e$var$game.field[x][y] !== 0) {\n            $09e991522ca7e64e$var$gameField.rows[x].cells[y].textContent = $09e991522ca7e64e$var$game.field[x][y];\n            $09e991522ca7e64e$var$gameField.rows[x].cells[y].classList.add(`field-cell--${$09e991522ca7e64e$var$game.field[x][y]}`);\n        }\n    }\n    $09e991522ca7e64e$var$scoreWindow.textContent = $09e991522ca7e64e$var$game.score;\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n        }\n        $09e991522ca7e64e$var$createGameField();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n});\n\n\n//# sourceMappingURL=index.e45ed96b.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst start = document.querySelector('.start');\nconst gameField = document.querySelector('.game-field');\nconst messageStart = document.querySelector('.message-start');\nconst scoreWindow = document.querySelector('.game-score');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nstart.addEventListener('click', () => {\n  if (start.classList.contains('restart')) {\n    start.textContent = 'Restart';\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        gameField.rows[i].cells[j].classList\n          .remove(`field-cell--${game.field[i][j]}`);\n        gameField.rows[i].cells[j].textContent = '';\n      }\n    }\n\n    game.restart();\n\n    scoreWindow.textContent = game.getScore();\n\n    game.start();\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (game.field[x][y] !== 0) {\n          gameField.rows[x].cells[y]\n            .classList.add(`field-cell--${game.field[x][y]}`);\n          gameField.rows[x].cells[y].textContent = game.field[x][y];\n        }\n      }\n    }\n  } else {\n    start.classList.add('restart');\n    start.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n    game.start();\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (game.field[x][y] !== 0) {\n          gameField.rows[x].cells[y]\n            .classList.add(`field-cell--${game.field[x][y]}`);\n          gameField.rows[x].cells[y].textContent = game.field[x][y];\n        }\n      }\n    }\n  }\n});\n\nfunction createGameField() {\n  for (let x = 0; x < game.field.length; x++) {\n    for (let y = 0; y < game.field.length; y++) {\n      gameField.rows[x].cells[y].classList\n        .remove(`field-cell--${gameField.rows[x].cells[y].textContent}`);\n      gameField.rows[x].cells[y].textContent = '';\n\n      if (game.field[x][y] !== 0) {\n        gameField.rows[x].cells[y].textContent = game.field[x][y];\n\n        gameField.rows[x].cells[y]\n          .classList.add(`field-cell--${game.field[x][y]}`);\n      }\n    }\n  }\n  scoreWindow.textContent = game.score;\n}\n\ndocument.addEventListener('keydown', e => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n    }\n\n    createGameField();\n  }\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n});\n","'use strict';\n\nclass Game {\n  /**\n* Creates a new game instance.\n*\n* @param {number[][]} initialState\n* The initial state of the board.\n* @default\n* [[0, 0, 0, 0],\n*  [0, 0, 0, 0],\n*  [0, 0, 0, 0],\n*  [0, 0, 0, 0]]\n*\n* If passed, the board will be initialized with the provided\n* initial state.\n*/\n  constructor(initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]]) {\n    this.field = initialState.map(row => [...row]);\n    this.initialState = initialState.map(row => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  randomCell() {\n    let row = 0;\n    let col = 0;\n    let value = 2;\n\n    for (let i = 0; i < 1; i++) {\n      row = Math.floor(Math.random() * 4);\n      col = Math.floor(Math.random() * 4);\n\n      const cell = [row, col];\n\n      const subValue = Math.floor(Math.random() * 100);\n\n      if (subValue > 89) {\n        value = 4;\n      } else {\n        value = 2;\n      }\n\n      if (this.field[cell[0]][cell[1]] === 0) {\n        this.field[cell[0]][cell[1]] = value;\n      } else {\n        i--;\n      }\n    }\n  };\n\n  moveLeft() {\n    const copy = this.field.map(row => row.map(el => el));\n    const stat = this.getStatus();\n\n    if (stat === 'playing') {\n      for (let x = 0; x <= this.field.length - 1; x++) {\n        for (let y = 0; y < this.field.length - 1; y++) {\n          for (let xX = 0; xX <= this.field.length - 1; xX++) {\n            for (let yY = 0; yY < this.field.length - 1;) {\n              const cur = this.field[xX][yY];\n              const nextCur = this.field[xX][yY + 1];\n\n              if (cur === 0 && nextCur > 0) {\n                this.field[xX][yY] = this.field[xX][yY + 1];\n                this.field[xX][yY + 1] = 0;\n                yY = 0;\n              } else {\n                yY++;\n              }\n            }\n          }\n\n          const current = this.field[x][y];\n          const next = this.field[x][y + 1];\n\n          if (current === next) {\n            this.field[x][y] *= 2;\n            this.score += this.field[x][y];\n            this.field[x][y + 1] = 0;\n          }\n        }\n      }\n    }\n\n    const newState = this.getState();\n\n    if (JSON.stringify(copy) !== JSON.stringify(newState)) {\n      this.randomCell();\n    }\n  }\n\n  moveRight() {\n    const copy = this.field.map(row => row.map(el => el));\n    const stat = this.getStatus();\n\n    if (stat === 'playing') {\n      for (let x = 0; x <= this.field.length - 1; x++) {\n        for (let y = this.field.length - 1; y > 0; y--) {\n          for (let xX = 0; xX <= this.field.length - 1; xX++) {\n            for (let yY = this.field.length - 1; yY > 0;) {\n              const cur = this.field[xX][yY];\n              const nextCur = this.field[xX][yY - 1];\n\n              if (cur === 0 && nextCur > 0) {\n                this.field[xX][yY] = this.field[xX][yY - 1];\n                this.field[xX][yY - 1] = 0;\n                yY = this.field.length - 1;\n              } else {\n                yY--;\n              }\n            }\n          }\n\n          const current = this.field[x][y];\n          const next = this.field[x][y - 1];\n\n          if (current === next) {\n            this.field[x][y] *= 2;\n            this.score += this.field[x][y];\n            this.field[x][y - 1] = 0;\n          }\n        }\n      }\n    }\n\n    const newState = this.getState();\n\n    if (JSON.stringify(copy) !== JSON.stringify(newState)) {\n      this.randomCell();\n    }\n  }\n\n  moveUp() {\n    const copy = this.field.map(row => row.map(el => el));\n    const stat = this.getStatus();\n\n    if (stat === 'playing') {\n      for (let y = 0; y < this.field.length; y++) {\n        for (let x = 0; x < this.field.length - 1; x++) {\n          for (let yY = 0; yY < this.field.length; yY++) {\n            for (let xX = 0; xX < this.field.length - 1;) {\n              const cur = this.field[xX][yY];\n              const nextCur = this.field[xX + 1][yY];\n\n              if (cur === 0 && nextCur > 0) {\n                this.field[xX][yY] = this.field[xX + 1][yY];\n                this.field[xX + 1][yY] = 0;\n                xX = 0;\n              } else {\n                xX++;\n              }\n            }\n          }\n\n          const current = this.field[x][y];\n          const next = this.field[x + 1][y];\n\n          if (current === next) {\n            this.field[x][y] *= 2;\n            this.score += this.field[x][y];\n            this.field[x + 1][y] = 0;\n          }\n        }\n      }\n    }\n\n    const newState = this.getState();\n\n    if (JSON.stringify(copy) !== JSON.stringify(newState)) {\n      this.randomCell();\n    }\n  }\n\n  moveDown() {\n    const copy = this.field.map(row => row.map(el => el));\n    const stat = this.getStatus();\n\n    if (stat === 'playing') {\n      for (let y = this.field.length - 1; y >= 0; y--) {\n        for (let x = this.field.length - 1; x > 0; x--) {\n          for (let yY = this.field.length - 1; yY >= 0; yY--) {\n            for (let xX = this.field.length - 1; xX > 0;) {\n              const cur = this.field[xX][yY];\n              const nextCur = this.field[xX - 1][yY];\n\n              if (cur === 0 && nextCur > 0) {\n                this.field[xX][yY] = this.field[xX - 1][yY];\n                this.field[xX - 1][yY] = 0;\n                xX = this.field.length - 1;\n              } else {\n                xX--;\n              }\n            }\n          }\n\n          const current = this.field[x][y];\n          const next = this.field[x - 1][y];\n\n          if (current === next) {\n            this.field[x][y] *= 2;\n            this.score += this.field[x][y];\n            this.field[x - 1][y] = 0;\n          }\n        }\n      }\n    }\n\n    const newState = this.getState();\n\n    if (JSON.stringify(copy) !== JSON.stringify(newState)) {\n      this.randomCell();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.field;\n  };\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  canMove() {\n    for (let x = 0; x <= 3; x++) {\n      for (let y = 0; y < 3; y++) {\n        if (this.field[x][y] === this.field[x][y + 1]) {\n          return true;\n        }\n      }\n    }\n\n    for (let y = 0; y <= 3; y++) {\n      for (let x = 0; x < 3; x++) {\n        if (this.field[x][y] === this.field[x + 1][y]) {\n          return true;\n        }\n      }\n    }\n\n    for (let y = 0; y <= 3; y++) {\n      for (let x = 0; x < 3; x++) {\n        if (this.field[x][y] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n\n  isWin() {\n    for (let x = 0; x < this.field.length; x++) {\n      for (let y = 0; y < this.field.length; y++) {\n        if (this.field[x][y] >= 2048) {\n          return true;\n        }\n      }\n    }\n  }\n\n  getStatus() {\n    if (!this.canMove()) {\n      this.status = 'lose';\n    }\n\n    if (this.isWin()) {\n      this.status = 'win';\n    }\n\n    return this.status;\n  }\n\n  start() {\n    let value = 2;\n    let row = 0;\n    let col = 0;\n\n    for (let i = 0; i < 2; i++) {\n      row = Math.floor(Math.random() * 4);\n      col = Math.floor(Math.random() * 4);\n\n      const newCell = [row, col];\n\n      if (this.field[newCell[0]][newCell[1]] === 0) {\n        const subValue = Math.floor(Math.random() * 100);\n\n        if (subValue > 89) {\n          value = 4;\n        } else {\n          value = 2;\n        }\n\n        this.field[newCell[0]][newCell[1]] = value;\n      } else {\n        i--;\n      }\n    }\n\n    this.status = 'playing';\n  }\n\n  restart(initialState) {\n    this.status = 'idle';\n    this.score = 0;\n    this.field = this.initialState.map(row => [...row]);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","field","map","row","status","score","randomCell","value","i","cell","Math","floor","random","subValue","moveLeft","copy","el","stat","getStatus","x","length","y","xX","yY","cur","nextCur","newState","getState","JSON","stringify","moveRight","moveUp","moveDown","getScore","canMove","isWin","start","newCell","restart","$09e991522ca7e64e$var$start","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$scoreWindow","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","addEventListener","classList","contains","textContent","add","j","rows","cells","remove","e","key","$09e991522ca7e64e$var$createGameField"],"version":3,"file":"index.e45ed96b.js.map"}